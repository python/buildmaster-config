# -*- python -*-  vi:ft=python:
# kate: indent-mode python; hl python;
# vim:set ts=8 sw=4 sts=4 et:

# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory (although the filename
# can be changed with the --basedir option to 'mktap buildbot master').

# It has one job: define a dictionary named BuildmasterConfig. This
# dictionary has a variety of keys to control different aspects of the
# buildmaster. They are documented in docs/config.xhtml .

import os
import sys

from datetime import timedelta

from buildbot.schedulers.basic import SingleBranchScheduler
from buildbot.schedulers.forcesched import ForceScheduler
from buildbot.schedulers.timed import Nightly
from buildbot.plugins import reporters, util
from buildbot import locks
from buildbot.www.auth import NoAuth
from twisted.python import log

sys.path.append(os.path.dirname(__file__))

# Make sure locals are up to date on reconfig
for k in list(sys.modules):
    if k.split(".")[0] in ["custom"]:
        sys.modules.pop(k)
from custom.factories import (  # noqa: E402
    CUSTOM_BRANCH_NAME,
    UnixBuild,
    UnixRefleakBuild,
    UnixInstalledBuild,
    AIXBuild,
    AIXBuildWithoutComputedGotos,
    NonDebugUnixBuild,
    PGOUnixBuild,
    ClangUbsanLinuxBuild,
    ClangUnixInstalledBuild,
    SharedUnixBuild,
    LTONonDebugUnixBuild,
    LTOPGONonDebugBuild,
    WindowsBuild,
    SlowWindowsBuild,
    Windows27VS9Build,
    Windows6427VS9Build,
    Windows64Build,
    Windows64RefleakBuild,
    Windows64ReleaseBuild,
    WindowsArm32Build,
    WindowsArm32ReleaseBuild,
)
from custom.pr_reporter import GitHubPullRequestReporter    # noqa: E402
from custom.settings import Settings    # noqa: E402
from custom.steps import Git    # noqa: E402
from custom.workers import get_workers  # noqa: E402

settings = Settings.from_file(os.path.join(os.path.dirname(__file__), 'settings.yaml'))

WORKERS = get_workers(settings)

if bool(settings.do_auth):
    AUTH = util.GitHubAuth(
        clientId=str(settings.github_auth_id),
        clientSecret=str(settings.github_auth_secret),
        apiVersion=4,
        getTeamsMembership=True,
    )
    AUTHZ = util.Authz(
        allowRules=[
            # Admins can do anything.
            util.AnyEndpointMatcher(role="admins", defaultDeny=False),
            # Allow authors to stop, force or rebuild their own builds,
            # allow core devs to stop, force or rebuild any build.
            util.StopBuildEndpointMatcher(role="owner", defaultDeny=False),
            util.StopBuildEndpointMatcher(role="buildbot-owners", defaultDeny=False),
            util.StopBuildEndpointMatcher(role="python-core"),
            util.RebuildBuildEndpointMatcher(role="owner", defaultDeny=False),
            util.RebuildBuildEndpointMatcher(role="buildbot-owners", defaultDeny=False),
            util.RebuildBuildEndpointMatcher(role="python-core"),
            util.ForceBuildEndpointMatcher(role="owner", defaultDeny=False),
            util.ForceBuildEndpointMatcher(role="python-core"),
            # Allow release managers to enable/disable schedulers.
            util.EnableSchedulerEndpointMatcher(role="python-release-managers"),
            # Future-proof control endpoints.
            util.AnyControlEndpointMatcher(role="admins"),
        ],
        roleMatchers=[
            util.RolesFromGroups(groupPrefix='python/'),
            util.RolesFromOwner(role="owner"),
            util.RolesFromUsername(
                roles=['admins'],
                usernames=[
                    'zware',
                    'vstinner',
                    'bitdancer',
                    'pitrou',
                    'pablogsal',
                ],
            )
        ]
    )
else:
    log.err('WARNING: Web UI is completely open')
    # Completely open
    AUTH = NoAuth()
    AUTHZ = util.Authz()

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

c['db_url'] = str(settings.db_url)

# horizons
c['changeHorizon'] = 300

# configure a janitor which will delete all logs older than one month,
# and will run on sundays at noon
c['configurators'] = [util.JanitorConfigurator(
    logHorizon=timedelta(weeks=4),
    hour=12,
    dayOfWeek=6
)]

# workers are set up in workers.py
c['workers'] = [w.bb_worker for w in WORKERS]

# repo url, buildbot category name, git branch name
git_url = str(settings.git_url)
git_branches = [
    (git_url, "3.x", "master"),
    (git_url, "3.8", "3.8"),
    (git_url, "3.7", "3.7"),
    (git_url, "2.7", "2.7"),
    (git_url, CUSTOM_BRANCH_NAME, "buildbot-custom"),
    # Add the following line if you want to clean up a particular
    # buildworker branch (here "3.4")
    # XXX Make this work again...
    #("https://hg.python.org/buildbot/empty", "3.4", "empty"),
]

STABLE = "stable"
UNSTABLE = "unstable"


# classes using longer timeout for koobs's very slow buildbots
class SlowNonDebugUnixBuild(NonDebugUnixBuild):
    test_timeout = 30 * 60


class SlowSharedUnixBuild(SharedUnixBuild):
    test_timeout = 30 * 60


# We use one scheduler per branch (as the AnyBranchScheduler is useless)
# and one builder per worker and branch

# the 'builders' list defines the Builders. Each one is configured with a
# dictionary, using the following keys:
#  name (required): the name used to describe this builder
#  workername (required): which worker to use, must appear in c['bots']
#  builddir (required): which subdirectory to run the builder in
#  factory (required): a BuildFactory to define how the build is run
#  periodicBuildTime (optional): if set, force a build every N seconds

# The order below is not really important but I find it makes things neater.

if 'a diff without a big indentation change is desired':
    builders = [
        # -- Stable builders --
        # Linux
        ("AMD64 Debian root", "angelico-debian-amd64", UnixBuild, STABLE),
        ("AMD64 Debian PGO", "gps-debian-profile-opt", PGOUnixBuild, STABLE),
        ("AMD64 Ubuntu Shared", "bolen-ubuntu", SharedUnixBuild, STABLE),
        ("ARMv7 Debian buster", "gps-ubuntu-exynos5-armv7l", UnixBuild, STABLE),
        ("PPC64 Fedora", "edelsohn-fedora-ppc64", UnixBuild, STABLE),
        ("PPC64LE Fedora", "edelsohn-fedora-ppc64le", UnixBuild, STABLE),
        ("s390x SLES", "edelsohn-sles-z", UnixBuild, STABLE),
        ("s390x Debian", "edelsohn-debian-z", UnixBuild, STABLE),
        ("s390x RHEL", "edelsohn-rhel-z", UnixBuild, STABLE),
        ("x86 Gentoo Non-Debug with X", "ware-gentoo-x86",
            NonDebugUnixBuild, STABLE),
        ("x86 Gentoo Installed with X", "ware-gentoo-x86",
            UnixInstalledBuild, STABLE),
        ("x86 Gentoo Refleaks", "ware-gentoo-x86", UnixRefleakBuild, STABLE),
        ("AMD64 Fedora Stable", "cstratak-fedora-stable-x86_64", UnixBuild, STABLE),
        ("AMD64 Fedora Stable Refleaks", "cstratak-fedora-stable-x86_64", UnixRefleakBuild, STABLE),
        ("AMD64 Fedora Stable Clang", "cstratak-fedora-stable-x86_64", ClangUbsanLinuxBuild, STABLE),
        ("AMD64 Fedora Stable Clang Installed", "cstratak-fedora-stable-x86_64", ClangUnixInstalledBuild, STABLE),
        ("AMD64 Fedora Stable LTO", "cstratak-fedora-stable-x86_64", LTONonDebugUnixBuild, STABLE),
        ("AMD64 Fedora Stable LTO + PGO", "cstratak-fedora-stable-x86_64", LTOPGONonDebugBuild, STABLE),
        ("AMD64 RHEL7", "cstratak-RHEL7-x86_64", UnixBuild, STABLE),
        ("AMD64 RHEL7 Refleaks", "cstratak-RHEL7-x86_64", UnixRefleakBuild, STABLE),
        ("AMD64 RHEL7 LTO", "cstratak-RHEL7-x86_64", LTONonDebugUnixBuild, STABLE),
        ("AMD64 RHEL7 LTO + PGO", "cstratak-RHEL7-x86_64", LTOPGONonDebugBuild, STABLE),
        ("AMD64 RHEL8", "cstratak-RHEL8-x86_64", UnixBuild, STABLE),
        ("AMD64 RHEL8 Refleaks", "cstratak-RHEL8-x86_64", UnixRefleakBuild, STABLE),
        ("AMD64 RHEL8 LTO", "cstratak-RHEL8-x86_64", LTONonDebugUnixBuild, STABLE),
        ("AMD64 RHEL8 LTO + PGO", "cstratak-RHEL8-x86_64", LTOPGONonDebugBuild, STABLE),
        # macOS
        ("x86-64 High Sierra", "billenstein-sierra", UnixBuild, STABLE),
        # Other Unix
        ("AMD64 FreeBSD Non-Debug", "koobs-freebsd-9e36",
            SlowNonDebugUnixBuild, STABLE),
        ("AMD64 FreeBSD Shared", "koobs-freebsd-564d",
            SlowSharedUnixBuild, STABLE),
        # Windows
        ("AMD64 Windows7 SP1", "kloth-win64", Windows64Build, STABLE),
        ("AMD64 Windows7 SP1 VS9.0", "kloth-win64",
            Windows6427VS9Build, STABLE),
        ("AMD64 Windows10", "bolen-windows10", Windows64Build, STABLE),
        ("AMD64 Windows8.1 Non-Debug", "ware-win81-release",
            Windows64ReleaseBuild, STABLE),
        ("AMD64 Windows8.1 Refleaks", "ware-win81-release",
            Windows64RefleakBuild, STABLE),
        ("x86 Windows7", "bolen-windows7", SlowWindowsBuild, STABLE),
        ("x86 Windows XP", "bolen-windows", WindowsBuild, STABLE),
        ("x86 Windows XP VS9.0", "bolen-windows", Windows27VS9Build, STABLE),

        # -- Unstable builders --
        # Linux x86 / AMD64
        ("AMD64 Clang UBSan", "gps-clang-ubsan", ClangUbsanLinuxBuild, UNSTABLE),
        ("AMD64 Alpine Linux", "ware-alpine", UnixBuild, UNSTABLE),
        ("AMD64 Ubuntu", "einat-ubuntu", UnixBuild, UNSTABLE),
        ("AMD64 Fedora Rawhide", "cstratak-fedora-rawhide-x86_64", UnixBuild, UNSTABLE),
        ("AMD64 Fedora Rawhide Refleaks", "cstratak-fedora-rawhide-x86_64", UnixRefleakBuild, UNSTABLE),
        ("AMD64 Fedora Rawhide Clang", "cstratak-fedora-rawhide-x86_64", ClangUbsanLinuxBuild, UNSTABLE),
        ("AMD64 Fedora Rawhide Clang Installed", "cstratak-fedora-rawhide-x86_64", ClangUnixInstalledBuild, UNSTABLE),
        ("AMD64 Fedora Rawhide LTO", "cstratak-fedora-rawhide-x86_64", LTONonDebugUnixBuild, UNSTABLE),
        ("AMD64 Fedora Rawhide LTO + PGO", "cstratak-fedora-rawhide-x86_64", LTOPGONonDebugBuild, UNSTABLE),
        # Linux other archs
        # macOS
        # Other Unix
        ("AMD64 Cygwin64 on Windows 10", "bray-win10-cygwin-amd64", UnixBuild, UNSTABLE),
        ("POWER6 AIX", "aixtools-aix-power6", AIXBuildWithoutComputedGotos, UNSTABLE),
        ("PPC64 AIX", "edelsohn-aix-ppc64", AIXBuild, UNSTABLE),
        # Windows
        ("ARM32 Windows10 1903", "monson-win-arm32", WindowsArm32Build, UNSTABLE),
        ("ARM32 Windows10 1903 Non-Debug", "monson-win-arm32", WindowsArm32ReleaseBuild, UNSTABLE),
    ]
    dailybuilders = [
        "x86 Gentoo Refleaks",
        "AMD64 Windows8.1 Refleaks",
        "AMD64 Fedora Rawhide Refleaks",
        "AMD64 Fedora Stable Refleaks",
        "AMD64 RHEL7 Refleaks",
        "AMD64 RHEL8 Refleaks",
    ]

# Match builder name (excluding the branch name) of builders that should only
# run on the master and "custom" branches.
ONLY_MASTER_BRANCH = (
    "Alpine Linux",
    # Cygwin is not supported on 2.7, 3.6, 3.7
    "Cygwin",
    # ARM32 Windows support is 3.8+ only
    "ARM32 Windows",
)

c['builders'] = []
c['schedulers'] = []

# Match builder name (including the branch name) of builders that should never
# emit any notification. Basically, notifications are disabled on workers
# which were never green (tests always failed).
NO_NOTIFICATION = (
    "Alpine Linux",
    "Cygwin",
    # UBSan always failed on 3.6, 3.7 and 3.x
    "AMD64 Clang UBSan 3.",
    # Guilty until proven innocent
    "ARM32 Windows",
    # 2019-08-27: No one seems to be able/available to debug issues specific to
    # AIX.  For example, https://bugs.python.org/issue36273 was open for 5
    # months and nobody managed to debug this issue (to fix it).
    "PPC64 AIX",
    # 2019-09-17: No one seems to be able/available to debug issues specific to
    # AIX. For example, https://bugs.python.org/issue36752 (multiprocessing
    # core dump) was open for 3 months and nobody managed to debug this issue
    # (to fix it).
    "POWER6 AIX",
)

parallel = {
    w.name: f'-j{w.parallel_tests}' for w in WORKERS if w.parallel_tests
}
extra_factory_args = {
    'ware-gentoo-x86': {
        # test curses as well
        'test_with_PTY': True,
    },
}

# The following with the worker owners' agreement
cpulock = locks.WorkerLock(
    "cpu",
    maxCountForWorker={
        w.name: w.parallel_builders for w in WORKERS if w.parallel_builders
    }
)


def is_important_file(filename):
    unimportant_prefixes = (
        '.github/',
        '.gitignore',
        '.vsts',
        'Misc/',
        'Doc/',
        'Demo/',
    )
    unimportant_suffixes = (
        '.md',
        '.rst',
        '.yml',
        '.yaml',
        'README',
    )
    if filename.lstrip('\\/').startswith(unimportant_prefixes):
        return False
    if filename.endswith(unimportant_suffixes):
        return False
    # Everything else is assumed important.
    return True


def is_important_change(change):
    # If any file is important, the change is important.
    for filename in change.files:
        if is_important_file(filename):
            return True
    return False


github_status_builders = []
mail_status_builders = []

# Regular builders

for git_url, branchname, git_branch in git_branches:
    buildernames = []
    dailybuildernames = []
    for name, worker, buildfactory, stability in builders:
        if "Windows XP" in name and branchname != "2.7":
            # 3.5+ drop support for XP
            continue
        if "VS9.0" in name and branchname != "2.7":
            continue
        if name.endswith("Freeze") and branchname == "2.7":
            # 2.7 isn't set up for testing freezing
            continue
        # 2019-06-19: Test suite - AIX passes on master and 3.X branches, fails on 2.7
        if "AIX" in name and branchname in ("2.7", "3.7"):
            continue
        if (any(pattern in name for pattern in ONLY_MASTER_BRANCH)
                and branchname not in ("3.x", CUSTOM_BRANCH_NAME)):
            # Workers known to be broken on 2.7 and 3.7: let's focus on
            # supporting these platforms in the master branch. Don't run
            # custom jobs neither.
            continue

        buildername = name + " " + branchname
        source = Git(
            repourl=git_url,
            branch=git_branch,
            timeout=3600,
            mode='full',
            method='clean',
        )
        f = buildfactory(
            source,
            parallel=parallel.get(worker),
            branch=branchname,
            **extra_factory_args.get(worker, {})
        )
        if name in dailybuilders:
            dailybuildernames.append(buildername)
        else:
            buildernames.append(buildername)
        if (all(pattern not in buildername for pattern in NO_NOTIFICATION)
                # disable notifications on custom builders
                and branchname != CUSTOM_BRANCH_NAME):
            mail_status_builders.append(buildername)
            # disable GitHub notifications for unstable builders
            if stability == STABLE:
                github_status_builders.append(buildername)
        c['builders'].append(
            util.BuilderConfig(
                name=buildername,
                workernames=[worker],
                builddir='%s.%s%s' % (
                    branchname, worker, getattr(f, 'buildersuffix', '')
                ),
                factory=f,
                tags=[
                    branchname,
                    stability,
                ] + getattr(f, 'tags', []),
                locks=[cpulock.access('counting')]
            )
        )
    # Make sure daily builders pick up custom jobs, and don't try to run when
    # the custom branch doesn't exist
    if branchname == CUSTOM_BRANCH_NAME:
        buildernames.extend(dailybuildernames)
        dailybuildernames = []
    c['schedulers'].append(SingleBranchScheduler(
        name=branchname,
        change_filter=util.ChangeFilter(branch=git_branch),
        treeStableTimer=30,  # seconds
        builderNames=buildernames,
        fileIsImportant=is_important_change,
    ))
    c['schedulers'].append(Nightly(
        name=branchname + '-daily',
        hour=0,
        minute=0,
        change_filter=util.ChangeFilter(branch=git_branch),
        builderNames=dailybuildernames,
    ))


# Set up aditional schedulers

c["schedulers"].append(
    ForceScheduler(
        name="force",
        builderNames=[builder.name for builder in c["builders"]],
        reason=util.FixedParameter(name="reason", label="reason", default=""),
        codebases=[
            util.CodebaseParameter(
                "",
                label="CPython repository",
                # will generate nothing in the form, but branch, revision, repository,
                # and project are needed by buildbot scheduling system so we
                # need to pass a value ("")
                branch=util.FixedParameter(name="branch", default=""),
                revision=util.FixedParameter(name="revision", default=""),
                repository=util.FixedParameter(name="repository", default=""),
                project=util.FixedParameter(name="project", default=""),
            ),
        ],
    )
)

# 'workerPortnum' defines the TCP port to listen on. This must match the value
# configured into the buildworkers (with their --master option)

c['protocols'] = {
    "pb": {
        "port": "tcp:{}".format(settings.worker_port)
    }
}

# 'www' is the configuration for everything accessible via
# http[s]://buildbot.python.org/all/

c['www'] = dict(
    port=int(settings.web_port),
    auth=AUTH,
    authz=AUTHZ,
    change_hook_dialects={
        'github': {'secret': str(settings.git_secret), 'strict': True},
    },
    plugins=dict(
        waterfall_view={},
        console_view={},
        grid_view={})
    )

# 'services' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/reporters/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c['services'] = []


if bool(settings.send_mail):
    c['services'].append(reporters.MailNotifier(
        fromaddr="buildbot@python.org",
        mode="problem",
        relayhost="mail.python.org",
        extraRecipients=["buildbot-status@python.org"],
        sendToInterestedUsers=False,
        extraHeaders={'Reply-To': "buildbot-status@python.org"},
        builders=mail_status_builders,
    ))

c['services'].append(reporters.IRC(
    host="irc.freenode.org",
    nick=str(settings.irc_nick),
    channels=[{"channel": str(settings.irc_channel)}],
    allowForce=False,
    notify_events={
        'exceptionToFailure': 1,
        'exceptionToSuccess': 1,
        'exceptionToWarnings': 1,
        'failureToException': 1,
        'failureToSuccess': 1,
        'failureToWarnings': 1,
        'warningsToException': 1,
        'warningsToFailure': 1,
        'warningsToSuccess': 1,
        'successToException': 1,
        'successToFailure': 1,
        'successToWarnings': 1,
    },
))

c['services'].append(reporters.GitHubStatusPush(
    str(settings.github_status_token),
    builders=github_status_builders,
    verbose=bool(settings.verbosity),
))

c['services'].append(GitHubPullRequestReporter(
    str(settings.github_status_token),
    builders=github_status_builders,
    verbose=bool(settings.verbosity),))

# if you set 'manhole', you can telnet into the buildmaster and get an
# interactive python shell, which may be useful for debugging buildbot
# internals. It is probably only useful for buildbot developers.
# from buildbot.master import Manhole
# c['manhole'] = Manhole(9999, "admin", "oneddens")

# the 'projectName' string will be used to describe the project that this
# buildbot is working on. For example, it is used as the title of the
# waterfall HTML page. The 'projectURL' string will be used to provide a link
# from buildbot HTML pages to your project's home page.

c['projectName'] = "Python"
c['projectURL'] = "https://www.python.org/"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.Waterfall page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = str(settings.buildbot_url)

# disable sending of 'buildbotNetUsageData' for now, to improve startup time
c['buildbotNetUsageData'] = None

c['change_source'] = []
