# -*- python -*-  vi:ft=python:
# kate: indent-mode python; hl python;
# vim:set ts=8 sw=4 sts=4 et:

# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory (although the filename
# can be changed with the --basedir option to 'mktap buildbot master').

# It has one job: define a dictionary named BuildmasterConfig. This
# dictionary has a variety of keys to control different aspects of the
# buildmaster. They are documented in docs/config.xhtml .

import os
import sys

from datetime import timedelta

from buildbot.schedulers.basic import SingleBranchScheduler
from buildbot.schedulers.forcesched import ForceScheduler
from buildbot.schedulers.timed import Nightly
from buildbot.plugins import reporters, util
from buildbot import locks

sys.path.append(os.path.dirname(__file__))   # noqa: E402

# Make sure locals are up to date on reconfig
for k in list(sys.modules):
    if k.split(".")[0] in ["local", "custom"]:
        sys.modules.pop(k)
from custom.factories import (
    UnixBuild,
    UnixRefleakBuild,
    UnixInstalledBuild,
    AIXBuild,
    AIXBuildWithGcc,
    NonDebugUnixBuild,
    PGOUnixBuild,
    ClangUbsanLinuxBuild,
    ClangUnixInstalledBuild,
    SharedUnixBuild,
    WindowsBuild,
    SlowWindowsBuild,
    Windows27VS9Build,
    Windows6427VS9Build,
    Windows64Build,
    Windows64RefleakBuild,
    Windows64ReleaseBuild,
    WindowsArm32Build,
    WindowsArm32ReleaseBuild,
)
from custom.pr_reporter import GitHubPullRequestReporter
from custom.steps import Git

# sensitive and/or instance-specific values
try:
    from local import (PRODUCTION, VERBOSITY, WORKERS, AUTH,
                       BUILDBOT_URL, DB_URL, WORKER_PORT, WEB_PORT,
                       IRC_NICK, IRC_CHANNEL,
                       STATUS_TOKEN,
                       GIT_URL, GITHUB_SECRET)
except ImportError:
    from buildbot.plugins import worker as _worker
    from buildbot.www.auth import NoAuth
    PRODUCTION = False
    VERBOSITY = 0
    WORKERS = [_worker.Worker('test-worker', 'badsecret')]
    AUTH = NoAuth()
    DB_URL = "sqlite:///state.sqlite"
    WORKER_PORT = 9021
    WEB_PORT = 'tcp:9011'
    BUILDBOT_URL = 'http://localhost:9011/'
    IRC_NICK = 'py-bb-test'
    IRC_CHANNEL = '#buildbot-test'
    STATUS_TOKEN = 'thistokendoesnotwork'
    GIT_URL = 'https://github.com/python/cpython.git'
    GITHUB_SECRET = 'thisisntverysecret'

if PRODUCTION:
    AUTHZ = util.Authz(
        allowRules=[
            # Admins can do anything.
            util.AnyEndpointMatcher(role="admins", defaultDeny=False),
            # Allow authors to stop, force or rebuild their own builds,
            # allow core devs to stop, force or rebuild any build.
            util.StopBuildEndpointMatcher(role="owner", defaultDeny=False),
            util.StopBuildEndpointMatcher(role="buildbot-owners", defaultDeny=False),
            util.StopBuildEndpointMatcher(role="python-core"),
            util.RebuildBuildEndpointMatcher(role="owner", defaultDeny=False),
            util.RebuildBuildEndpointMatcher(role="buildbot-owners", defaultDeny=False),
            util.RebuildBuildEndpointMatcher(role="python-core"),
            util.ForceBuildEndpointMatcher(role="owner", defaultDeny=False),
            util.ForceBuildEndpointMatcher(role="python-core"),
            # Allow release managers to enable/disable schedulers.
            util.EnableSchedulerEndpointMatcher(role="python-release-managers"),
            # Future-proof control endpoints.
            util.AnyControlEndpointMatcher(role="admins"),
        ],
        roleMatchers=[
            util.RolesFromGroups(groupPrefix='python/'),
            util.RolesFromOwner(role="owner"),
            util.RolesFromUsername(
                roles=['admins'],
                usernames=[
                    'zware',
                    'vstinner',
                    'bitdancer',
                    'pitrou',
                    'pablogsal',
                ],
            )
        ]
    )
else:
    # Default to open.
    AUTHZ = util.Authz()

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

c['db_url'] = DB_URL

# horizons
c['changeHorizon'] = 300

# configure a janitor which will delete all logs older than one month,
# and will run on sundays at noon
c['configurators'] = [util.JanitorConfigurator(
    logHorizon=timedelta(weeks=4),
    hour=12,
    dayOfWeek=6
)]

# workers are set up in local.py
c['workers'] = WORKERS

# repo url, buildbot category name, git branch name
CUSTOM_BRANCH_NAME = "custom"
git_branches = [
    (GIT_URL, "3.x", "master"),
    (GIT_URL, "3.7", "3.7"),
    (GIT_URL, "3.6", "3.6"),
    (GIT_URL, "2.7", "2.7"),
    (GIT_URL, CUSTOM_BRANCH_NAME, "buildbot-custom"),
    # Add the following line if you want to clean up a particular
    # buildworker branch (here "3.4")
    # XXX Make this work again...
    #("https://hg.python.org/buildbot/empty", "3.4", "empty"),
]

STABLE = "stable"
UNSTABLE = "unstable"

class FreeBSDCurrentShared(SharedUnixBuild):
    test_timeout = 30 * 60

# We use one scheduler per branch (as the AnyBranchScheduler is useless)
# and one builder per worker and branch

# the 'builders' list defines the Builders. Each one is configured with a
# dictionary, using the following keys:
#  name (required): the name used to describe this builder
#  workername (required): which worker to use, must appear in c['bots']
#  builddir (required): which subdirectory to run the builder in
#  factory (required): a BuildFactory to define how the build is run
#  periodicBuildTime (optional): if set, force a build every N seconds

# The order below is not really important but I find it makes things neater.

if PRODUCTION:
    builders = [
        # -- Stable builders --
        # Linux
        ("AMD64 Debian root", "angelico-debian-amd64", UnixBuild, STABLE),
        ("AMD64 Debian PGO", "gps-debian-profile-opt", PGOUnixBuild, STABLE),
        ("AMD64 Ubuntu Shared", "bolen-ubuntu", SharedUnixBuild, STABLE),
        ("ARMv7 Debian buster", "gps-ubuntu-exynos5-armv7l", UnixBuild, STABLE),
        ("PPC64 Fedora", "edelsohn-fedora-ppc64", UnixBuild, STABLE),
        ("PPC64LE Fedora", "edelsohn-fedora-ppc64le", UnixBuild, STABLE),
        ("s390x SLES", "edelsohn-sles-z", UnixBuild, STABLE),
        ("s390x Debian", "edelsohn-debian-z", UnixBuild, STABLE),
        ("s390x RHEL", "edelsohn-rhel-z", UnixBuild, STABLE),
        ("x86 Gentoo Non-Debug with X", "ware-gentoo-x86",
            NonDebugUnixBuild, STABLE),
        ("x86 Gentoo Installed with X", "ware-gentoo-x86",
            UnixInstalledBuild, STABLE),
        ("x86 Gentoo Refleaks", "ware-gentoo-x86", UnixRefleakBuild, STABLE),
        # macOS
        ("x86-64 High Sierra", "billenstein-sierra", UnixBuild, STABLE),
        # Other Unix
        ("AMD64 FreeBSD 10-STABLE Non-Debug", "koobs-freebsd10",
            NonDebugUnixBuild, STABLE),
        ("AMD64 FreeBSD CURRENT Shared", "koobs-freebsd-current",
            FreeBSDCurrentShared, STABLE),
        # Windows
        ("AMD64 Windows7 SP1", "kloth-win64", Windows64Build, STABLE),
        ("AMD64 Windows7 SP1 VS9.0", "kloth-win64",
            Windows6427VS9Build, STABLE),
        ("AMD64 Windows10", "bolen-windows10", Windows64Build, STABLE),
        ("AMD64 Windows8.1 Non-Debug", "ware-win81-release",
            Windows64ReleaseBuild, STABLE),
        ("AMD64 Windows8.1 Refleaks", "ware-win81-release",
            Windows64RefleakBuild, STABLE),
        ("x86 Windows7", "bolen-windows7", SlowWindowsBuild, STABLE),
        ("x86 Windows XP", "bolen-windows", WindowsBuild, STABLE),
        ("x86 Windows XP VS9.0", "bolen-windows", Windows27VS9Build, STABLE),

        # -- Unstable builders --
        # Linux x86 / AMD64
        ("AMD64 Clang UBSan", "gps-clang-ubsan", ClangUbsanLinuxBuild, UNSTABLE),
        ("AMD64 Alpine Linux", "ware-alpine", UnixBuild, UNSTABLE),
        ("AMD64 Ubuntu", "einat-ubuntu", UnixBuild, UNSTABLE),
        ("AMD64 Fedora Rawhide", "cstratak-fedora", UnixBuild, UNSTABLE),
        ("AMD64 Fedora Rawhide Refleaks", "cstratak-fedora", UnixRefleakBuild, UNSTABLE),
        ("AMD64 Fedora Rawhide Clang Installed", "cstratak-fedora", ClangUnixInstalledBuild, UNSTABLE),
        # Linux other archs
        # macOS
        # Other Unix
        ("AMD64 Cygwin64 on Windows 10", "bray-win10-cygwin-amd64", UnixBuild, UNSTABLE),
        ("POWER6 AIX", "aixtools-aix-power6", AIXBuild, UNSTABLE),
        ("PPC64 AIX", "edelsohn-aix-ppc64", AIXBuildWithGcc, UNSTABLE),
        # Windows
        ("ARM32 Windows10 1903", "monson-win-arm32", WindowsArm32Build, UNSTABLE),
        ("ARM32 Windows10 1903 Non-Debug", "monson-win-arm32", WindowsArm32ReleaseBuild, UNSTABLE),
    ]
    dailybuilders = [
        "x86 Gentoo Refleaks",
        "AMD64 Windows8.1 Refleaks",
        "AMD64 Fedora Rawhide Refleaks",
    ]
else:
    builders = [
        ('Unix Test', 'test-worker', UnixBuild, STABLE),
        ('Unix Refleak Test', 'test-worker', UnixRefleakBuild, UNSTABLE),
    ]
    dailybuilders = [
        'Unix Refleak Test',
    ]

# Match builder name (excluding the branch name) of builders that should only
# run on the master and "custom" branches.
ONLY_MASTER_BRANCH = (
    # 2019-03-08: Test suite only pass on PPC64 AIX 3.x, fail on 2.7 and 3.7
    "AIX",
    "Alpine Linux",
    # Cygwin is not supported on 2.7, 3.6, 3.7
    "Cygwin",
)

c['builders'] = []
c['schedulers'] = []

# Match builder name (including the branch name) of builders that should never
# emit any notification. Basically, notifications are disabled on workers
# which were never green (tests always failed).
NO_NOTIFICATION = (
    "Alpine Linux",
    "Cygwin",
    # UBSan always failed on 3.6, 3.7 and 3.x
    "AMD64 Clang UBSan 3.",
)

parallel = {
    'cstratak-fedora': '-j10',
    'kloth-win64': '-j4',
    # Snakebite
    'koobs-freebsd10': '-j4',
    'koobs-freebsd-current': '-j4',
    'gps-ubuntu-exynos5-armv7l': '-j8',
    'ware-win81-release': '-j4',
}
extra_factory_args = {
    'ware-gentoo-x86': {
        # test curses as well
        'test_with_PTY': True,
    },
}

# The following with the worker owners' agreement
cpulock = locks.WorkerLock("cpu", maxCountForWorker={
    'kloth-win64': 2,
    'ware-gentoo-x86': 2,
})


def is_important_file(filename):
    unimportant_prefixes = (
        '.github/',
        '.gitignore',
        '.vsts',
        'Misc/',
        'Doc/',
        'Demo/',
    )
    unimportant_suffixes = (
        '.md',
        '.rst',
        '.yml',
        '.yaml',
        'README',
    )
    if filename.lstrip('\\/').startswith(unimportant_prefixes):
        return False
    if filename.endswith(unimportant_suffixes):
        return False
    # Everything else is assumed important.
    return True


def is_important_change(change):
    # If any file is important, the change is important.
    for filename in change.files:
        if is_important_file(filename):
            return True
    return False


github_status_builders = []
mail_status_builders = []

# Regular builders

for git_url, branchname, git_branch in git_branches:
    buildernames = []
    dailybuildernames = []
    for name, worker, buildfactory, stability in builders:
        if "Windows XP" in name and branchname != "2.7":
            # 3.5+ drop support for XP
            continue
        if "VS9.0" in name and branchname != "2.7":
            continue
        if name.endswith("Freeze") and branchname == "2.7":
            # 2.7 isn't set up for testing freezing
            continue
        if (any(pattern in name for pattern in ONLY_MASTER_BRANCH)
        and branchname not in ("3.x", CUSTOM_BRANCH_NAME)):
            # Workers known to be broken on 2.7 and 3.7: let's focus on
            # supporting these platforms in the master branch. Don't run
            # custom jobs neither.
            continue

        buildername = name + " " + branchname
        source = Git(
            repourl=git_url,
            branch=git_branch,
            timeout=3600,
            mode='full',
            method='clean',
        )
        f = buildfactory(
            source,
            parallel=parallel.get(worker),
            branch=branchname,
            **extra_factory_args.get(worker, {})
        )
        if name in dailybuilders:
            dailybuildernames.append(buildername)
        else:
            buildernames.append(buildername)
        if (all(pattern not in buildername for pattern in NO_NOTIFICATION)
        # disable notifications on custom builders
        and branchname != CUSTOM_BRANCH_NAME):
            mail_status_builders.append(buildername)
            # disable GitHub notifications for unstable builders
            if stability == STABLE:
                github_status_builders.append(buildername)
        c['builders'].append(
            util.BuilderConfig(
                name=buildername,
                workernames=[worker],
                builddir='%s.%s%s' % (
                    branchname, worker, getattr(f, 'buildersuffix', '')
                ),
                factory=f,
                tags=[
                    branchname,
                    stability,
                ] + getattr(f, 'tags', []),
                locks=[cpulock.access('counting')]
            )
        )
    # Make sure daily builders pick up custom jobs, and don't try to run when
    # the custom branch doesn't exist
    if branchname == CUSTOM_BRANCH_NAME:
        buildernames.extend(dailybuildernames)
        dailybuildernames = []
    c['schedulers'].append(SingleBranchScheduler(
        name=branchname,
        change_filter=util.ChangeFilter(branch=git_branch),
        treeStableTimer=30,  # seconds
        builderNames=buildernames,
        fileIsImportant=is_important_change,
    ))
    c['schedulers'].append(Nightly(
        name=branchname + '-daily',
        hour=0,
        minute=0,
        change_filter=util.ChangeFilter(branch=git_branch),
        builderNames=dailybuildernames,
    ))


# Set up aditional schedulers

c["schedulers"].append(
    ForceScheduler(
        name="force",
        builderNames=[builder.name for builder in c["builders"]],
        reason=util.FixedParameter(name="reason", label="reason", default=""),
        codebases=[
            util.CodebaseParameter(
                "",
                label="CPython repository",
                # will generate nothing in the form, but branch, revision, repository,
                # and project are needed by buildbot scheduling system so we
                # need to pass a value ("")
                branch=util.FixedParameter(name="branch", default=""),
                revision=util.FixedParameter(name="revision", default=""),
                repository=util.FixedParameter(name="repository", default=""),
                project=util.FixedParameter(name="project", default=""),
            ),
        ],
    )
)

# 'workerPortnum' defines the TCP port to listen on. This must match the value
# configured into the buildworkers (with their --master option)

c['protocols'] = {
    "pb": {
        "port": "tcp:{}".format(WORKER_PORT)
    }
}

# 'www' is the configuration for everything accessible via
# http[s]://buildbot.python.org/all/

c['www'] = dict(
    port=WEB_PORT,
    auth=AUTH,
    authz=AUTHZ,
    change_hook_dialects={
        'github': {'secret': GITHUB_SECRET, 'strict': True},
    },
    plugins=dict(
        waterfall_view={},
        console_view={},
        grid_view={})
    )

# 'services' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/reporters/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c['services'] = []


if PRODUCTION:
    c['services'].append(reporters.MailNotifier(
        fromaddr="buildbot@python.org",
        mode="problem",
        relayhost="mail.python.org",
        extraRecipients=["buildbot-status@python.org"],
        sendToInterestedUsers=False,
        extraHeaders={'Reply-To': "buildbot-status@python.org"},
        builders=mail_status_builders,
    ))

c['services'].append(reporters.IRC(
    host="irc.freenode.org",
    nick=IRC_NICK,
    channels=[{"channel": IRC_CHANNEL}],
    allowForce=False,
    notify_events={
        'exceptionToFailure': 1,
        'exceptionToSuccess': 1,
        'exceptionToWarnings': 1,
        'failureToException': 1,
        'failureToSuccess': 1,
        'failureToWarnings': 1,
        'warningsToException': 1,
        'warningsToFailure': 1,
        'warningsToSuccess': 1,
        'successToException': 1,
        'successToFailure': 1,
        'successToWarnings': 1,
    },
))

c['services'].append(reporters.GitHubStatusPush(
    STATUS_TOKEN,
    builders=github_status_builders,
    verbose=bool(VERBOSITY),
))

c['services'].append(GitHubPullRequestReporter(
    STATUS_TOKEN,
    builders=github_status_builders,
    verbose=bool(VERBOSITY),))

# if you set 'manhole', you can telnet into the buildmaster and get an
# interactive python shell, which may be useful for debugging buildbot
# internals. It is probably only useful for buildbot developers.
# from buildbot.master import Manhole
# c['manhole'] = Manhole(9999, "admin", "oneddens")

# the 'projectName' string will be used to describe the project that this
# buildbot is working on. For example, it is used as the title of the
# waterfall HTML page. The 'projectURL' string will be used to provide a link
# from buildbot HTML pages to your project's home page.

c['projectName'] = "Python"
c['projectURL'] = "https://www.python.org/"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.Waterfall page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = BUILDBOT_URL

# disable sending of 'buildbotNetUsageData' for now, to improve startup time
c['buildbotNetUsageData'] = None

c['change_source'] = []
