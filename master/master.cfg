# -*- python -*-  vi:ft=python:
# kate: indent-mode python; hl python;
# vim:set ts=8 sw=4 sts=4 et:

# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory (although the filename
# can be changed with the --basedir option to 'mktap buildbot master').

# It has one job: define a dictionary named BuildmasterConfig. This
# dictionary has a variety of keys to control different aspects of the
# buildmaster. They are documented in docs/config.xhtml .

import os
import subprocess
import sys

from datetime import timedelta

from buildbot.schedulers.basic import SingleBranchScheduler, AnyBranchScheduler
from buildbot.schedulers.forcesched import ForceScheduler
from buildbot.schedulers.timed import Nightly
from buildbot.plugins import reporters, util
from buildbot import locks
from twisted.python import log

import sentry_sdk
from sentry_sdk.integrations.sqlalchemy import SqlalchemyIntegration

sys.path.append(os.path.dirname(__file__))

# Make sure locals are up to date on reconfig
for k in list(sys.modules):
    if k.split(".")[0] in ["custom"]:
        sys.modules.pop(k)

from custom.factories import CUSTOM_BRANCH_NAME
from custom.auth import set_up_authorization  # noqa: E402
from custom.email_formatter import MESSAGE_FORMATTER  # noqa: E402
from custom.pr_reporter import GitHubPullRequestReporter  # noqa: E402
from custom.pr_testing import (
    CustomGitHubEventHandler,
    should_pr_be_tested,
)  # noqa: E402
from custom.settings import Settings  # noqa: E402
from custom.steps import Git, GitHub  # noqa: E402
from custom.workers import get_workers  # noqa: E402
from custom.release_dashboard import get_release_status_app    # noqa: E402
from custom.builders import (
    get_builders,
    STABLE,
    UNSTABLE,
    DAILYBUILDERS,
    ONLY_MASTER_BRANCH,
)  # noqa: E402

def set_up_sentry():
    try:
        release_sha = subprocess.check_output(["git", "rev-parse", "HEAD"], text=True)
    except subprocess.SubprocessError:
        log.err('Could not get current SHA for the release!')
        return
    sentry_dsn = settings.get('sentry_dsn', None)
    if sentry_dsn is None:
        log.err('The sentry DSN could not be found in the settings!')
        return
    sentry_sdk.init(dsn=sentry_dsn, release=release_sha,
                    integrations=[SqlalchemyIntegration()])

    def logToSentry(event):
        if not event.get('isError') or 'failure' not in event:
            return

        f = event['failure']
        sentry_sdk.capture_exception((f.type, f.value, f.getTracebackObject()))

    log.addObserver(logToSentry)

settings_path = os.path.join(os.path.dirname(__file__), 'settings.yaml')

try:
    settings = Settings.from_file(settings_path)
    set_up_sentry()
except FileNotFoundError:
    log.err(f"WARNING: settings file could not be found at {settings_path}")
    settings = Settings()


WORKERS = get_workers(settings)

BUILDERS = get_builders(settings)

AUTH, AUTHZ = set_up_authorization(settings)

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

c["db_url"] = str(settings.db_url)

# horizons
c["changeHorizon"] = 300

# configure a janitor which will delete all logs older than one month,
# and will run on sundays at noon
c["configurators"] = [
    util.JanitorConfigurator(logHorizon=timedelta(weeks=4), hour=12, dayOfWeek=6)
]

# workers are set up in workers.py
c["workers"] = [w.bb_worker for w in WORKERS]

# repo url, buildbot category name, git branch name
git_url = str(settings.git_url)
git_branches = [
    (git_url, "3.x", "master"),
    (git_url, "3.8", "3.8"),
    (git_url, "3.7", "3.7"),
    (git_url, "2.7", "2.7"),
    (git_url, CUSTOM_BRANCH_NAME, "buildbot-custom"),
    # Add the following line if you want to clean up a particular
    # buildworker branch (here "3.4")
    # XXX Make this work again...
    # ("https://hg.python.org/buildbot/empty", "3.4", "empty"),
]


c["builders"] = []
c["schedulers"] = []

# Match builder name (including the branch name) of builders that should never
# emit any notification. Basically, notifications are disabled on workers
# which were never green (tests always failed).
NO_NOTIFICATION = (
    "Alpine Linux",
    "Cygwin",
    # UBSan always failed on 3.6, 3.7 and 3.x
    "AMD64 Clang UBSan 3.",
    # Guilty until proven innocent
    "ARM32 Windows",
    # 2019-08-27: No one seems to be able/available to debug issues specific to
    # AIX.  For example, https://bugs.python.org/issue36273 was open for 5
    # months and nobody managed to debug this issue (to fix it).
    "PPC64 AIX",
    # 2019-09-17: No one seems to be able/available to debug issues specific to
    # AIX. For example, https://bugs.python.org/issue36752 (multiprocessing
    # core dump) was open for 3 months and nobody managed to debug this issue
    # (to fix it).
    "POWER6 AIX",
)

parallel = {w.name: f"-j{w.parallel_tests}" for w in WORKERS if w.parallel_tests}
extra_factory_args = {
    "ware-gentoo-x86": {
        # test curses as well
        "test_with_PTY": True,
    },
}

# The following with the worker owners' agreement
cpulock = locks.WorkerLock(
    "cpu",
    maxCountForWorker={
        w.name: w.parallel_builders for w in WORKERS if w.parallel_builders
    },
)


def is_important_file(filename):
    unimportant_prefixes = (
        ".github/",
        ".gitignore",
        ".vsts",
        "Misc/",
        "Doc/",
        "Demo/",
    )
    unimportant_suffixes = (
        ".md",
        ".rst",
        ".yml",
        ".yaml",
        "README",
    )
    if filename.lstrip("\\/").startswith(unimportant_prefixes):
        return False
    return not filename.endswith(unimportant_suffixes)


def is_important_change(change):
    return any(is_important_file(filename) for filename in change.files)


github_status_builders = []
mail_status_builders = []

# Regular builders

for branch_num, (git_url, branchname, git_branch) in enumerate(git_branches):
    buildernames = []
    dailybuildernames = []
    for name, worker, buildfactory, stability in BUILDERS:
        if "Windows XP" in name and branchname != "2.7":
            # 3.5+ drop support for XP
            continue
        if "VS9.0" in name and branchname != "2.7":
            continue
        if name.endswith("Freeze") and branchname == "2.7":
            # 2.7 isn't set up for testing freezing
            continue
        # 2019-06-19: Test suite - AIX passes on master and 3.X branches, fails on 2.7
        if "AIX" in name and branchname in ("2.7", "3.7"):
            continue
        if any(
            pattern in name for pattern in ONLY_MASTER_BRANCH
        ) and branchname not in ("3.x", CUSTOM_BRANCH_NAME):
            # Workers known to be broken on 2.7 and 3.7: let's focus on
            # supporting these platforms in the master branch. Don't run
            # custom jobs neither.
            continue

        buildername = name + " " + branchname
        source = Git(
            repourl=git_url,
            branch=git_branch,
            timeout=3600,
            mode="full",
            method="clean",
        )
        f = buildfactory(
            source,
            parallel=parallel.get(worker),
            branch=branchname,
            **extra_factory_args.get(worker, {}),
        )
        if name in DAILYBUILDERS:
            dailybuildernames.append(buildername)
        else:
            buildernames.append(buildername)
        if (
            all(pattern not in buildername for pattern in NO_NOTIFICATION)
            # disable notifications on custom builders
            and branchname != CUSTOM_BRANCH_NAME
        ):
            mail_status_builders.append(buildername)
            # disable GitHub notifications for unstable builders
            if stability == STABLE:
                github_status_builders.append(buildername)
        c["builders"].append(
            util.BuilderConfig(
                name=buildername,
                workernames=[worker],
                builddir="%s.%s%s"
                % (branchname, worker, getattr(f, "buildersuffix", "")),
                factory=f,
                tags=[branchname, stability,] + getattr(f, "tags", []),
                locks=[cpulock.access("counting")],
            )
        )
    # Make sure daily builders pick up custom jobs, and don't try to run when
    # the custom branch doesn't exist
    if branchname == CUSTOM_BRANCH_NAME:
        buildernames.extend(dailybuildernames)
        dailybuildernames = []
    c["schedulers"].append(
        SingleBranchScheduler(
            name=branchname,
            change_filter=util.ChangeFilter(branch=git_branch),
            treeStableTimer=30,  # seconds
            builderNames=buildernames,
            fileIsImportant=is_important_change,
        )
    )
    if dailybuildernames:
        c["schedulers"].append(
            Nightly(
                name=branchname + "-daily",
                hour=int(branch_num / (len(git_branches) - 1) * 23),
                minute=0,
                change_filter=util.ChangeFilter(branch=git_branch),
                builderNames=dailybuildernames,
            )
        )


# Set up Pull Request builders

pull_request_builders = []

for name, worker, buildfactory, stability in BUILDERS:
    if stability != STABLE:
        continue

    if "Windows XP" in name or "VS9.0" in name:
        continue

    buildername = name + " " + "PR"

    if any(pattern in buildername for pattern in NO_NOTIFICATION):
        continue

    pull_request_builders.append(buildername)

    source = GitHub(repourl=git_url, timeout=3600, mode="full", method="clean",)

    f = buildfactory(
        source,
        parallel=parallel.get(worker),
        # Use the same downstream branch names as the "custom"
        # builder (check what the factories are doing with this
        # parameter for more info).
        branch="3",
        **extra_factory_args.get(worker, {}),
    )

    c["builders"].append(
        util.BuilderConfig(
            name=buildername,
            workernames=[worker],
            builddir="%s.%s%s"
            % ("pull_request", worker, getattr(f, "buildersuffix", "")),
            factory=f,
            tags=["PullRequest", stability,] + getattr(f, "tags", []),
            locks=[cpulock.access("counting")],
        )
    )

github_status_builders.extend(pull_request_builders)

c["schedulers"].append(
    AnyBranchScheduler(
        name="pull-request-scheduler",
        change_filter=util.ChangeFilter(filter_fn=should_pr_be_tested),
        treeStableTimer=30,  # seconds
        builderNames=pull_request_builders,
    )
)


# Set up aditional schedulers

c["schedulers"].append(
    ForceScheduler(
        name="force",
        builderNames=[builder.name for builder in c["builders"]],
        reason=util.FixedParameter(name="reason", label="reason", default=""),
        codebases=[
            util.CodebaseParameter(
                "",
                label="CPython repository",
                # will generate nothing in the form, but branch, revision, repository,
                # and project are needed by buildbot scheduling system so we
                # need to pass a value ("")
                branch=util.FixedParameter(name="branch", default=""),
                revision=util.FixedParameter(name="revision", default=""),
                repository=util.FixedParameter(name="repository", default=""),
                project=util.FixedParameter(name="project", default=""),
            ),
        ],
    )
)

# 'workerPortnum' defines the TCP port to listen on. This must match the value
# configured into the buildworkers (with their --master option)

c["protocols"] = {"pb": {"port": "tcp:{}".format(settings.worker_port)}}

# 'www' is the configuration for everything accessible via
# http[s]://buildbot.python.org/all/

c["www"] = dict(
    port=f"tcp:{int(settings.web_port)}",
    auth=AUTH,
    authz=AUTHZ,
    change_hook_dialects={
        "github": {
            "class": CustomGitHubEventHandler,
            "secret": str(settings.github_change_hook_secret),
            "strict": True,
            "token": settings.github_status_token,
        },
    },
    plugins=dict(waterfall_view={}, console_view={}, grid_view={}),
)

# 'services' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/reporters/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c["services"] = []


status_email = str(settings.status_email)
if bool(settings.send_mail):
    c["services"].append(
        reporters.MailNotifier(
            fromaddr=str(settings.from_email),
            mode="problem",
            relayhost=str(settings.email_relay_host),
            extraRecipients=[status_email],
            sendToInterestedUsers=False,
            extraHeaders={"Reply-To": status_email},
            builders=mail_status_builders,
            messageFormatter=MESSAGE_FORMATTER,
        )
    )

if bool(settings.irc_notice):
    c["services"].append(
        reporters.IRC(
            host=str(settings.irc_host),
            nick=str(settings.irc_nick),
            channels=[{"channel": str(settings.irc_channel)}],
            notify_events={
                "better",
                "worse",
                "exception",
                # 'cancelled' is not logged to avoid spaming IRC when
                # a "pull-request-scheduler" is cancelled
            },
        )
    )

c["services"].append(
    reporters.GitHubStatusPush(
        str(settings.github_status_token),
        builders=github_status_builders,
        verbose=bool(settings.verbosity),
    )
)

c["services"].append(
    GitHubPullRequestReporter(
        str(settings.github_status_token),
        builders=github_status_builders,
        verbose=bool(settings.verbosity),
    )
)

# if you set 'manhole', you can telnet into the buildmaster and get an
# interactive python shell, which may be useful for debugging buildbot
# internals. It is probably only useful for buildbot developers.
# from buildbot.master import Manhole
# c['manhole'] = Manhole(9999, "admin", "oneddens")

# the 'projectName' string will be used to describe the project that this
# buildbot is working on. For example, it is used as the title of the
# waterfall HTML page. The 'projectURL' string will be used to provide a link
# from buildbot HTML pages to your project's home page.

c["projectName"] = "Python"
c["projectURL"] = "https://www.python.org/"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.Waterfall page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c["buildbotURL"] = str(settings.buildbot_url)

# disable sending of 'buildbotNetUsageData' for now, to improve startup time
c["buildbotNetUsageData"] = None

c['change_source'] = []

c['www']['plugins']['wsgi_dashboards'] = [
    {
        'name': 'release_status',
        'caption': 'Release Status',
        'app': get_release_status_app(github_status_builders),
        'order': 2,
        'icon': 'rocket'
    }
]
