# -*- python -*-  vi:ft=python:
# kate: indent-mode python; hl python;
# vim:set ts=8 sw=4 sts=4 et:

# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory (although the filename
# can be changed with the --basedir option to 'mktap buildbot master').

# It has one job: define a dictionary named BuildmasterConfig. This
# dictionary has a variety of keys to control different aspects of the
# buildmaster. They are documented in docs/config.xhtml .

import os
import sys

from datetime import timedelta

from buildbot.schedulers.basic import SingleBranchScheduler
from buildbot.schedulers.timed import Nightly
from buildbot.plugins import reporters, util
from buildbot.process import factory
from buildbot.steps.shell import ShellCommand, Configure, Compile
from buildbot.steps.transfer import DirectoryUpload
from buildbot import locks
from buildbot.steps.source.git import Git

sys.path.append(os.path.dirname(__file__))   # noqa: E402

from custom.steps import Test, Clean, Install, LockInstall, Uninstall

# sensitive and/or instance-specific values
try:
    from local import (PRODUCTION, WORKERS, AUTH,
                       BUILDBOT_URL, DB_URL, WORKER_PORT, WEB_PORT,
                       IRC_NICK, IRC_CHANNEL,
                       GIT_URL, GITHUB_SECRET)
except ImportError:
    from buildbot.plugins import worker as _worker
    from buildbot.www.auth import NoAuth
    PRODUCTION = False
    WORKERS = [_worker.Worker('test-worker', 'badsecret')]
    AUTH = NoAuth()
    DB_URL = "sqlite:///state.sqlite"
    WORKER_PORT = 9021
    WEB_PORT = 'tcp:9011'
    BUILDBOT_URL = 'http://localhost:9011/'
    IRC_NICK = 'py-bb-test'
    IRC_CHANNEL = '#buildbot-test'
    GIT_URL = 'https://github.com/python/cpython.git'
    GITHUB_SECRET = 'thisisntverysecret'

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

c['db_url'] = DB_URL

# horizons
c['changeHorizon'] = 300

# configure a janitor which will delete all logs older than one month,
# and will run on sundays at noon
c['configurators'] = [util.JanitorConfigurator(
    logHorizon=timedelta(weeks=4),
    hour=12,
    dayOfWeek=6
)]

# workers are set up in local.py
c['workers'] = WORKERS

# repo url, buildbot category name, git branch name
master_branch_version = '3.8'
git_branches = [
    (GIT_URL, "3.x", "master"),
    (GIT_URL, "3.7", "3.7"),
    (GIT_URL, "3.6", "3.6"),
    (GIT_URL, "2.7", "2.7"),
    (GIT_URL, "custom", "buildbot-custom"),
    # Add the following line if you want to clean up a particular
    # buildworker branch (here "3.4")
    # XXX Make this work again...
    #("https://hg.python.org/buildbot/empty", "3.4", "empty"),
]

STABLE = ".stable"
UNSTABLE = ".unstable"

# We use one scheduler per branch (as the AnyBranchScheduler is useless)
# and one builder per worker and branch

# This (default) timeout is for each individual test file.
# It is a bit more than the default faulthandler timeout in regrtest.py
# (the latter isn't easily changed under Windows).
TEST_TIMEOUT = 20 * 60


class FreezeBuild(factory.BuildFactory):
    buildersuffix = '.freeze'  # to get unique directory names on master
    test_timeout = None

    def __init__(self, source, parallel, branch=None):
        factory.BuildFactory.__init__(self, [source])
        self.addStep(Configure(command=[
            './configure', '--prefix', '$(PWD)/target']))
        self.addStep(Compile(command=['make']))
        self.addStep(ShellCommand(name="install",
                                  description="installing",
                                  command=['make', 'install']))
        self.addStep(Test(command=[
            'make', '-C', 'Tools/freeze/test',
            'PYTHON=../../../target/bin/python3',
            'OUTDIR=../../../target/freezetest'
        ]))


class UnixBuild(factory.BuildFactory):
    configureFlags = ["--with-pydebug"]
    interpreterFlags = ""
    testFlags = "-j2"
    makeTarget = "all"
    test_timeout = None

    def __init__(self, source, parallel, branch=None,
                 test_with_PTY=False):
        factory.BuildFactory.__init__(self, [source])
        self.addStep(Configure(command=['./configure'] + self.configureFlags))
        compile = ['make', self.makeTarget]
        testopts = self.testFlags
        # Timeout for the buildworker process
        self.test_timeout = self.test_timeout or TEST_TIMEOUT
        # Timeout for faulthandler
        faulthandler_timeout = self.test_timeout - 5 * 60
        if parallel:
            compile = ['make', parallel, self.makeTarget]
            testopts = testopts + ' ' + parallel
        if '-j' not in testopts:
            testopts = '-j2 ' + testopts
        test = ["make", "buildbottest", "TESTOPTS=" + testopts]
        test += ["TESTPYTHONOPTS=" + self.interpreterFlags]
        test += ["TESTTIMEOUT=" + str(faulthandler_timeout)]

        self.addStep(Compile(command=compile))
        self.addStep(ShellCommand(name="pythoninfo",
                                  description="pythoninfo",
                                  command=['make', 'pythoninfo'],
                                  warnOnFailure=True))
        self.addStep(Test(
            command=test, timeout=self.test_timeout, usePTY=test_with_PTY))
        self.addStep(Clean())


class UnixRefleakBuild(UnixBuild):
    buildersuffix = '.refleak'
    testFlags = "-R 3:3 -u-cpu"
    # -R 3:3 is supposed to only require timeout x 6, but in practice,
    # it's much more slower. Use timeout x 10 to prevent timeout
    # caused by --huntrleaks.
    test_timeout = TEST_TIMEOUT * 10


class UnixInstalledBuild(factory.BuildFactory):
    buildersuffix = ".installed"
    configureFlags = []
    interpreterFlags = ['-Wdefault', '-bb', '-E']
    defaultTestOpts = ['-rwW', '-uall', '-j2']
    makeTarget = "all"
    installTarget = "install"
    test_timeout = None

    def __init__(self, source, parallel, branch,
                 test_with_PTY=False):
        factory.BuildFactory.__init__(self, [source])
        if branch == '3.x':
            branch = master_branch_version
        installed_python = './target/bin/python%s' % branch
        self.addStep(Configure(command=[
            './configure', '--prefix', '$(PWD)/target'] + self.configureFlags))

        compile = ['make', self.makeTarget]
        install = ['make', self.installTarget]
        testopts = self.defaultTestOpts[:]
        # Timeout for the buildworker process
        self.test_timeout = self.test_timeout or TEST_TIMEOUT
        # Timeout for faulthandler
        if parallel:
            compile = ['make', parallel, self.makeTarget]
            install = ['make', parallel, self.installTarget]
            testopts = testopts + [parallel]
        test = [installed_python] + self.interpreterFlags
        test += ['-m', 'test.regrtest'] + testopts

        self.addStep(Compile(command=compile))
        self.addStep(Install(command=install))
        self.addStep(LockInstall())
        self.addStep(Test(
            command=test, timeout=self.test_timeout, usePTY=test_with_PTY))
        self.addStep(Uninstall())
        self.addStep(Clean())


class UnixBuildWithICC(UnixBuild):
    configureFlags = ["--with-pydebug", "--with-icc"]


class NonDebugUnixBuildWithICC(UnixBuildWithICC):
    buildersuffix = '.nondebug'
    configureFlags = ["--with-icc"]


class UnixBuildWithoutDocStrings(UnixBuild):
    configureFlags = ["--with-pydebug", "--without-doc-strings"]


class AIXBuild(UnixBuild):
    configureFlags = [
        "--with-pydebug",
        "--without-gcc",
        "--without-computed-gotos",
    ]


class AIXBuildWithGcc(UnixBuild):
    configureFlags = ["--with-pydebug", "--with-gcc=yes"]


class NonDebugUnixBuild(UnixBuild):
    buildersuffix = '.nondebug'
    configureFlags = []


class OptimizeUnixBuild(UnixBuild):
    interpreterFlags = "-OO"


class PGOUnixBuild(NonDebugUnixBuild):
    configureFlags = ['--enable-optimizations']


class SharedUnixBuild(UnixBuild):
    configureFlags = ["--with-pydebug", "--enable-shared"]


class UniversalOSXBuild(UnixBuild):
    configureFlags = ["--with-pydebug", "--enable-universalsdk=/",
                      "--with-universal-archs=intel"]
    # Disabled until issues with test_bigmem get solved
    # We could put more but it would make test_bigmem even longer
    #testFlags = "-M5.5G"


class CLangBuild(UnixBuild):
    configureFlags = ["--with-pydebug", "CC=clang"]


class OptimizedCLangBuild(CLangBuild):
    interpreterFlags = "-OO"


class DTraceBuild(UnixBuild):
    configureFlags = ["--with-pydebug", "--with-dtrace"]


class DTraceCLangBuild(UnixBuild):
    configureFlags = ["--with-pydebug", "--with-dtrace", "CC=clang"]


class TigerBuild(UnixBuild):
    # bpo-30314: x86 Tiger requires longer than 15 minutes on some tests
    # like test_tools
    test_timeout = 30 * 60


class WindowsBuild(factory.BuildFactory):
    build_command = [r'Tools\buildbot\build.bat']
    test_command = [r'Tools\buildbot\test.bat']
    clean_command = [r'Tools\buildbot\clean.bat']
    python_command = [r'python.bat']
    buildFlags = []
    testFlags = ['-j2']
    cleanFlags = []
    test_timeout = None

    def __init__(self, source, parallel, branch=None):
        build_command = self.build_command + self.buildFlags
        test_command = self.test_command + self.testFlags
        clean_command = self.clean_command + self.cleanFlags
        if parallel:
            test_command.append(parallel)
        factory.BuildFactory.__init__(self, [source])
        self.addStep(Compile(command=build_command))
        self.addStep(ShellCommand(name="pythoninfo",
                                  description="pythoninfo",
                                  command=self.python_command + [
                                      '-m', 'test.pythoninfo'
                                  ],
                                  warnOnFailure=True))
        # timeout is a bit more than the regrtest default timeout
        if self.test_timeout:
            timeout = self.test_timeout
        else:
            timeout = TEST_TIMEOUT
        if branch != '2.7':
            test_command += ['--timeout', timeout - (5 * 60)]
        self.addStep(Test(command=test_command, timeout=timeout))
        self.addStep(Clean(command=clean_command))


class WindowsRefleakBuild(WindowsBuild):
    buildersuffix = '.refleak'
    testFlags = ['-j2', '-R', '3:3', '-u-cpu']
    # -R 3:3 is supposed to only require timeout x 6, but in practice,
    # it's much more slower. Use timeout x 10 to prevent timeout
    # caused by --huntrleaks.
    test_timeout = TEST_TIMEOUT * 10


class Windows27VS9Build(WindowsBuild):
    buildersuffix = 'vs9'
    build_command = [r'PC\VS9.0\build.bat', '-e', '-k', '-d']
    test_command = [r'PC\VS9.0\rt.bat', '-q', '-d', '-uall', '-rwW', '--slowest']
    clean_command = [r'PC\VS9.0\build.bat', '-t', 'Clean', '-d']
    python_command = [r'PC\VS9.0\python_d.exe']


class Windows6427VS9Build(Windows27VS9Build):
    test_command = [r'PC\VS9.0\rt.bat', '-x64', '-q', '-d', '-uall', '-rwW', '--slowest']
    buildFlags = ['-p', 'x64']
    cleanFlags = ['-p', 'x64']
    python_command = [r'PC\VS9.0\amd64\python_d.exe']


class Windows64Build(WindowsBuild):
    buildFlags = ['-p', 'x64']
    testFlags = ['-x64', '-j2']
    cleanFlags = ['-p', 'x64']


class Windows64RefleakBuild(Windows64Build):
    buildersuffix = '.refleak'
    testFlags = ['-x64', '-j2', '-R', '3:3:refleaks.log', '-u-cpu']
    # -R 3:3 is supposed to only require timeout x 6, but in practice,
    # it's much more slower. Use timeout x 10 to prevent timeout
    # caused by --huntrleaks.
    test_timeout = TEST_TIMEOUT * 10


class Windows64ReleaseBuild(Windows64Build):
    buildFlags = Windows64Build.buildFlags + ['-c', 'Release']
    testFlags = Windows64Build.testFlags + ['+d']
    # keep default cleanFlags, both configurations get cleaned


windows_icc_build_flags = [
    '--no-tkinter',
    '/p:PlatformToolset=Intel C++ Compiler 16.0',
]


class Windows64ICCBuild(Windows64Build):
    buildFlags = Windows64Build.buildFlags + windows_icc_build_flags


class Windows64ICCReleaseBuild(Windows64ReleaseBuild):
    buildersuffix = '.nondebug'
    buildFlags = Windows64ReleaseBuild.buildFlags + windows_icc_build_flags


class DMG(factory.BuildFactory):

    def __init__(self, source, branch, upload_dir):
        factory.BuildFactory.__init__(
            self,
            [
                source,
                ShellCommand(
                    name='umask',
                    description='umask',
                    command=['/bin/sh', '-c', 'umask'],
                ),
                Compile(
                    workdir='build/Mac/BuildScript',
                    command=[
                        'python2.5', './build-installer.py',
                        '--build-dir', '../../dmg'
                    ]
                ),
                DirectoryUpload(
                    workdir='build/dmg',
                    workersrc='diskimage',
                    masterdest=upload_dir
                ),
            ]
        )


# the 'builders' list defines the Builders. Each one is configured with a
# dictionary, using the following keys:
#  name (required): the name used to describe this builder
#  workername (required): which worker to use, must appear in c['bots']
#  builddir (required): which subdirectory to run the builder in
#  factory (required): a BuildFactory to define how the build is run
#  periodicBuildTime (optional): if set, force a build every N seconds

# The order below is not really important but I find it makes things neater.

if PRODUCTION:
    builders = [
        # -- Stable builders --
        # Linux
        ("AMD64 Debian root", "angelico-debian-amd64", UnixBuild, STABLE),
        ("AMD64 Debian PGO", "gps-debian-profile-opt", PGOUnixBuild, STABLE),
        ("PPC64 Fedora", "edelsohn-fedora-ppc64", UnixBuild, STABLE),
        ("PPC64LE Fedora", "edelsohn-fedora-ppc64le", UnixBuild, STABLE),
        ("s390x SLES", "edelsohn-sles-z", UnixBuild, STABLE),
        ("s390x Debian", "edelsohn-debian-z", UnixBuild, STABLE),
        ("s390x RHEL", "edelsohn-rhel-z", UnixBuild, STABLE),
        ("x86 Gentoo Non-Debug with X", "ware-gentoo-x86",
            NonDebugUnixBuild, STABLE),
        ("x86 Gentoo Installed with X", "ware-gentoo-x86",
            UnixInstalledBuild, STABLE),
        ("x86 Ubuntu Shared", "bolen-ubuntu", SharedUnixBuild, STABLE),
        # OS X
        ("x86 Tiger", "bolen-tiger", TigerBuild, STABLE),
        # Other Unix
        ("AMD64 FreeBSD 10.x Shared", "koobs-freebsd10",
            SharedUnixBuild, STABLE),
        ("AMD64 FreeBSD CURRENT Debug", "koobs-freebsd-current",
            UnixBuild, STABLE),
        ("AMD64 FreeBSD CURRENT Non-Debug", "koobs-freebsd-current",
            NonDebugUnixBuild, STABLE),
        # Windows
        ("AMD64 Windows7 SP1", "kloth-win64", Windows64Build, STABLE),
        ("AMD64 Windows8", "bolen-windows8", Windows64Build, STABLE),
        ("AMD64 Windows10", "bolen-windows10", Windows64Build, STABLE),
        ("AMD64 Windows8.1 Non-Debug", "ware-win81-release",
            Windows64ReleaseBuild, STABLE),
        ("x86 Windows7", "bolen-windows7", WindowsBuild, STABLE),
        ("x86 Windows XP", "bolen-windows", WindowsBuild, STABLE),

        # -- Unstable builders --
        # Linux x86 / AMD64
        ("x86 Gentoo Refleaks", "ware-gentoo-x86", UnixRefleakBuild, UNSTABLE),
        # Linux other archs
        ("ARMv7 Ubuntu", "gps-ubuntu-exynos5-armv7l", UnixBuild, UNSTABLE),
        # OS X
        ("x86-64 El Capitan", "billenstein-elcapitan", UnixBuild, UNSTABLE),
        ("x86-64 Sierra", "billenstein-sierra", UnixBuild, UNSTABLE),
        # Other Unix
        ("PPC64 AIX", "edelsohn-aix-ppc64", AIXBuildWithGcc, UNSTABLE),
        # Windows
        ("x86 Windows XP VS9.0", "bolen-windows", Windows27VS9Build, UNSTABLE),
        ("AMD64 Windows7 SP1 VS9.0", "kloth-win64",
            Windows6427VS9Build, UNSTABLE),
        ("AMD64 Windows8.1 Refleaks", "ware-win81-release",
            Windows64RefleakBuild, STABLE),
    ]
    dailybuilders = [
        "x86 Gentoo Refleaks",
        "AMD64 Windows8.1 Refleaks",
    ]
else:
    builders = [
        ('Unix Test', 'test-worker', UnixBuild, STABLE),
        ('Unix Refleak Test', 'test-worker', UnixRefleakBuild, STABLE),
    ]
    dailybuilders = [
        'Unix Refleak Test',
    ]

c['builders'] = []
c['schedulers'] = []

parallel = {
    'kloth-win64': '-j4',
    # Snakebite
    'koobs-freebsd10': '-j4',
    'gps-ubuntu-exynos5-armv7l': '-j8',
    'ware-win81-release': '-j4',
}
extra_factory_args = {
    'ware-gentoo-x86': {
        # test curses as well
        'test_with_PTY': True,
    },
}

# The following with the worker owners' agreement
cpulock = locks.WorkerLock("cpu", maxCountForWorker={
    'kloth-win64': 2,
    'ware-gentoo-x86': 2,
})


def is_important_file(filename):
    # Ignore changes from these directories, buildbot doesn't handle them.
    for prefix in ('Misc/', 'Doc/', 'Demo/'):
        if filename.startswith(prefix) or ('/' + prefix) in filename:
            return False
    return True


def is_important_change(change):
    # If any file is important, the change is important.
    for filename in change.files:
        if is_important_file(filename):
            return True
    return False


# Regular builders

for git_url, branchname, git_branch in git_branches:
    buildernames = []
    dailybuildernames = []
    for name, worker, buildfactory, stability in builders:
        if "Windows XP" in name and branchname != "2.7":
            # 3.5+ drop support for XP
            continue
        if "VS9.0" in name and branchname != "2.7":
            continue
        if name.endswith("Freeze") and branchname == "2.7":
            # 2.7 isn't set up for testing freezing
            continue
        buildername = name + " " + branchname
        source = Git(repourl=git_url, branch=git_branch, timeout=3600)
        f = buildfactory(
            source,
            parallel=parallel.get(worker),
            branch=branchname,
            **extra_factory_args.get(worker, {})
        )
        if name in dailybuilders:
            dailybuildernames.append(buildername)
        else:
            buildernames.append(buildername)
        c['builders'].append(
            util.BuilderConfig(
                name=buildername,
                workernames=[worker],
                builddir='%s.%s%s' % (
                    branchname, worker, getattr(f, 'buildersuffix', '')
                ),
                factory=f,
                tags=[branchname + stability],
                locks=[cpulock.access('counting')]
            )
        )
    # Make sure daily builders pick up custom jobs, and don't try to run when
    # the custom branch doesn't exist
    if git_branch == 'buildbot-custom':
        buildernames.extend(dailybuildernames)
        dailybuildernames = []
    c['schedulers'].append(SingleBranchScheduler(
        name=branchname,
        change_filter=util.ChangeFilter(branch=git_branch),
        treeStableTimer=30,  # seconds
        builderNames=buildernames,
        fileIsImportant=is_important_change,
    ))
    c['schedulers'].append(Nightly(
        name=branchname + '-daily',
        hour=0,
        minute=0,
        change_filter=util.ChangeFilter(branch=git_branch),
        builderNames=dailybuildernames,
    ))


# Daily DMG builders

if PRODUCTION:
    dmg_workers = [
        # worker name, master upload dir
        ('bolen-dmg', '/data/www/buildbot/daily-dmg'),
    ]
else:
    dmg_workers = []

for version, git_branch, hour in (('2.7', '2.7', 12),
                                  ('3.6', '3.6', 13),
                                  ('3.7', '3.7', 14),
                                  ('3.x', 'master', 15),
                                  ):
    source = Git(repourl=GIT_URL, branch=git_branch, timeout=3600)
    for worker_name, upload_dir in dmg_workers:
        dmgbuilder = DMG(source, version, upload_dir=upload_dir)
        builder_name = '%s-%s' % (worker_name, version)
        c['builders'].append(
            util.BuilderConfig(
                name=builder_name,
                workernames=[worker_name],
                # XXX Maybe switch to this some day?
                # builddir='%s.%s%s' % (
                #     branchname, worker, getattr(f, 'buildersuffix', '')
                # ),
                builddir=builder_name,
                factory=dmgbuilder,
                tags=['dmg'],
            )
        )
        c['schedulers'].append(Nightly(
            builder_name,
            [builder_name],
            hour=hour,
            minute=0,
            change_filter=util.ChangeFilter(branch=git_branch),
        ))


# 'workerPortnum' defines the TCP port to listen on. This must match the value
# configured into the buildworkers (with their --master option)

c['protocols'] = {
    "pb": {
        "port": "tcp:{}".format(WORKER_PORT)
    }
}

# 'services' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/reporters/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c['services'] = []


c['www'] = dict(
    port=WEB_PORT,
    auth=AUTH,
    change_hook_dialects={
        'github': {'secret': GITHUB_SECRET, 'strict': True},
    },
    plugins=dict(
        waterfall_view={},
        console_view={},
        grid_view={})
    )

c['services'].append(reporters.MailNotifier(
    fromaddr="buildbot@python.org",
    mode="problem",
    relayhost="mail.python.org",
    extraRecipients=["buildbot-status@python.org"],
    sendToInterestedUsers=False,
    extraHeaders={'Reply-To': "buildbot-status@python.org"},
))

c['services'].append(reporters.IRC(
    host="irc.freenode.org",
    nick=IRC_NICK,
    channels=[{"channel": IRC_CHANNEL}],
    allowForce=False,
    notify_events={
        'exceptionToFailure': 1,
        'exceptionToSuccess': 1,
        'exceptionToWarnings': 1,
        'failureToException': 1,
        'failureToSuccess': 1,
        'failureToWarnings': 1,
        'warningsToException': 1,
        'warningsToFailure': 1,
        'warningsToSuccess': 1,
        'successToException': 1,
        'successToFailure': 1,
        'successToWarnings': 1,
    },
))


# if you set 'manhole', you can telnet into the buildmaster and get an
# interactive python shell, which may be useful for debugging buildbot
# internals. It is probably only useful for buildbot developers.
# from buildbot.master import Manhole
# c['manhole'] = Manhole(9999, "admin", "oneddens")

# the 'projectName' string will be used to describe the project that this
# buildbot is working on. For example, it is used as the title of the
# waterfall HTML page. The 'projectURL' string will be used to provide a link
# from buildbot HTML pages to your project's home page.

c['projectName'] = "Python"
c['projectURL'] = "https://www.python.org/"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.Waterfall page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = BUILDBOT_URL

# disable sending of 'buildbotNetUsageData' for now, to improve startup time
c['buildbotNetUsageData'] = None

c['change_source'] = []
